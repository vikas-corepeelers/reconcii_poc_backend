package com.cpl.reconciliation.web.service;

public interface ThreePoQueries {

    String Swiggy_threePOQuery = "SELECT \n"
            + "    SUM(COALESCE(CALCULATE_THREE_PO_SALES(s.item_total,s.merchant_discount,s.packing_and_service_charges,'swiggy',s.order_status),0)) as threePOSales,\n"
            + "    SUM(coalesce(s.net_payable_amount_after_tcs_and_tds,0)) as threePOReceivables,\n"
            + "    SUM(coalesce(s.total_swiggy_service_fee,0)) as threePOCommission,\n"
            + "    0 as freebies,sum(coalesce(o.discount,0)) as posDiscounts,sum(coalesce(s.merchant_discount,0)) as threePODiscounts,\n"
            + "    SUM(ABS(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(s.item_total,s.merchant_discount,s.packing_and_service_charges,s.refund_for_disputed_order,0,0,'swiggy',s.order_status,s.pick_up_status,s.dot_pe_order_cancelled_stage,s.tcs,s.cash_pre_payment_at_restaurant,s.cancellation_attribution,s.delivery_fee,s.discount_on_swiggy_platform_service_fee,s.collection_fee,s.access_fee,merchant_cancellation_charges,s.call_center_servicefees),0)-coalesce(s.payout_amount,0))) as receivablesVsReceipts,\n"
            + "    SUM(COALESCE(CALCULATE_TOTAL_CHARGES(s.tds,s.total_gst,0),0)) AS threePOCharges,\n"
            + "    SUM(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(s.item_total,s.merchant_discount,s.packing_and_service_charges,s.refund_for_disputed_order,0,0,'swiggy',s.order_status,s.pick_up_status,s.dot_pe_order_cancelled_stage,s.tcs,cash_pre_payment_at_restaurant,s.cancellation_attribution,s.delivery_fee,s.discount_on_swiggy_platform_service_fee,s.collection_fee,access_fee,s.merchant_cancellation_charges,s.call_center_servicefees),0)) as posReceivables,\n"
            + "    SUM(coalesce(CALCULATE_COMMISSION_AMOUNT(s.item_total,s.merchant_discount,s.packing_and_service_charges,s.refund_for_disputed_order,'swiggy',s.order_status,s.discount_on_swiggy_platform_service_fee,s.collection_fee,s.access_fee,s.merchant_cancellation_charges,s.call_center_servicefees),0)) as posCommission,\n"
            + "    SUM((coalesce(CALCULATE_TDS(s.item_total,s.merchant_discount,s.packing_and_service_charges,s.refund_for_disputed_order, 'swiggy',s.order_status),0)+coalesce(CALCULATE_CHARGES_GST(s.item_total,s.merchant_discount,s.packing_and_service_charges,s.refund_for_disputed_order,0,'swiggy',s.order_status),0))) as posCharges,\n"
            + "    SUM(coalesce(CALCULATE_UNRECONCILED_AMOUNT(s.item_total,s.net_payable_amount_after_tcs_and_tds,s.merchant_discount,gst_on_order_including_cess,s.total_swiggy_service_fee,s.packing_and_service_charges,s.tds,s.total_gst,0,0,s.item_total+s.packing_and_service_charges-s.merchant_discount,s.actual_packaging_charge,s.refund_for_disputed_order,'swiggy',s.order_status,pick_up_status,s.cancellation_attribution,s.dot_pe_order_cancelled_stage,s.tcs,s.cash_pre_payment_at_restaurant,s.cancellation_attribution,s.delivery_fee,s.discount_on_swiggy_platform_service_fee,s.collection_fee,s.access_fee,s.merchant_cancellation_charges,s.call_center_servicefees),0)) as unreconciled,\n"
            + "    SUM(coalesce(CALCULATE_RECONCILED_AMOUNT(s.item_total,s.net_payable_amount_after_tcs_and_tds,s.merchant_discount,s.gst_on_order_including_cess,s.total_swiggy_service_fee,s.packing_and_service_charges,s.tds,s.total_gst,0,0,s.item_total+s.packing_and_service_charges-s.merchant_discount,s.actual_packaging_charge,s.refund_for_disputed_order,'swiggy',s.order_status,pick_up_status,s.cancellation_attribution,s.dot_pe_order_cancelled_stage,s.tcs,s.cash_pre_payment_at_restaurant,s.cancellation_attribution,s.delivery_fee,s.discount_on_swiggy_platform_service_fee,s.collection_fee,s.access_fee,s.merchant_cancellation_charges,s.call_center_servicefees),0)) as reconciled\n"
            + "FROM\n"
            + "    swiggy s left join orders o on s.order_no=o.threepoorder_id and threeposource='SWIGGY'\n"
            + "WHERE\n"
            + "    s.order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or s.store_code in (:storeCodes)) ;";

    String Swiggy_allPOSChargesQuery = "SELECT \n"
            + "order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,merchant_discount,item_total,actual_packaging_charge,refund_for_disputed_order,\n"
            + "    0 as freebies,\n"
            + "    coalesce(CALCULATE_COMMISSION_AMOUNT(item_total,merchant_discount,packing_and_service_charges,refund_for_disputed_order,'swiggy',order_status,discount_on_swiggy_platform_service_fee,collection_fee,access_fee,merchant_cancellation_charges,call_center_servicefees),0) as posCommission,\n"
            + "    (coalesce(CALCULATE_TDS(item_total,merchant_discount, actual_packaging_charge, refund_for_disputed_order, 'swiggy',order_status),0)+coalesce(CALCULATE_CHARGES_GST(item_total,merchant_discount,actual_packaging_charge,refund_for_disputed_order,'swiggy',order_status),0)) as posCharges\n"
            + "FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_allThreePOChargesQuery = "SELECT \n"
            + "order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,total_swiggy_service_fee,merchant_discount,tds,total_gst,\n"
            + "    coalesce(total_swiggy_service_fee,0) as threePOCommission,\n"
            + "    0 as freebies,\n"
            + "    coalesce(merchant_discount,0) as threePODiscounts,\n"
            + "    COALESCE(CALCULATE_TOTAL_CHARGES(tds,total_gst,0),0) AS threePOCharges\n"
            + "FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_threePOChargesQuery = "SELECT order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,tds,total_gst,\n"
            + "    COALESCE(CALCULATE_TOTAL_CHARGES(tds,total_gst,0),0) AS threePOCharges\n"
            + "FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_receivablesVsReceiptsQuery = "SELECT \n"
            + "order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,payout_date,reference_number,net_payable_amount_after_tcs_and_tds,item_total,merchant_discount,actual_packaging_charge,refund_for_disputed_order,order_status,pick_up_status,payout_amount,\n"
            + "    coalesce(net_payable_amount_after_tcs_and_tds,0) as threePOReceivables,\n"
            + "    0 as freebies,\n"
            + "    ABS(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_total,merchant_discount,packing_and_service_charges,refund_for_disputed_order,0,0,'swiggy',order_status,pick_up_status,dot_pe_order_cancelled_stage,tcs,cash_pre_payment_at_restaurant,cancellation_attribution,delivery_fee,discount_on_swiggy_platform_service_fee,collection_fee,access_fee,merchant_cancellation_charges,call_center_servicefees),0)-coalesce(payout_amount,0)) as receivablesVsReceipts,\n"
            + "    coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_total,merchant_discount,packing_and_service_charges,refund_for_disputed_order,0,0,'swiggy',order_status,pick_up_status,dot_pe_order_cancelled_stage,tcs,cash_pre_payment_at_restaurant,cancellation_attribution,delivery_fee,discount_on_swiggy_platform_service_fee,collection_fee,access_fee,merchant_cancellation_charges,call_center_servicefees),0) as posReceivables\n"
            + "FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_threePOReceivablesQuery = "SELECT order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code, net_payable_amount_after_tcs_and_tds,\n"
            + "    coalesce(net_payable_amount_after_tcs_and_tds,0) as threePOReceivables\n"
            + "    FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_threePOCommissionQuery = "SELECT \n"
            + "order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,total_swiggy_service_fee,\n"
            + "    coalesce(total_swiggy_service_fee,0) as threePOCommission\n"
            + "    FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_threePOFreebieQuery = "SELECT \n"
            + "    order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,merchant_discount,\n"
            + "    0 as freebies\n"
            + "    FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "     order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_posRecievableQuery = "SELECT order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,item_total,merchant_discount,actual_packaging_charge,refund_for_disputed_order,order_status,pick_up_status,\n"
            + "    coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_total,merchant_discount,packing_and_service_charges,refund_for_disputed_order,0,0,'swiggy',order_status,pick_up_status,dot_pe_order_cancelled_stage,tcs,cash_pre_payment_at_restaurant,cancellation_attribution,delivery_fee,discount_on_swiggy_platform_service_fee,collection_fee,access_fee,merchant_cancellation_charges,call_center_servicefees),0) as posReceivables\n"
            + "   FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "     order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_posCommissionQuery = "SELECT order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,item_total,merchant_discount,actual_packaging_charge,refund_for_disputed_order,order_status,pick_up_status,\n"
            + "    coalesce(CALCULATE_COMMISSION_AMOUNT(item_total,merchant_discount,packing_and_service_charges,refund_for_disputed_order,'swiggy',order_status,discount_on_swiggy_platform_service_fee,collection_fee,access_fee,merchant_cancellation_charges,call_center_servicefees),0) as posCommission\n"
            + "FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_posChargesQuery = "SELECT order_no,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,item_total,merchant_discount,actual_packaging_charge,refund_for_disputed_order,order_status,pick_up_status,\n"
            + "    (coalesce(CALCULATE_TDS(item_total,merchant_discount, packing_and_service_charges, refund_for_disputed_order, 'swiggy',order_status),0)+coalesce(CALCULATE_CHARGES_GST(item_total,merchant_discount,packing_and_service_charges,refund_for_disputed_order,0,'swiggy',order_status),0)) as posCharges\n"
            + "FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_freebiesQuery = "SELECT \n"
            + "  order_no,order_date,invoice_number,(pos_total_amount-pos_total_tax) as posSale,business_date,receipt_number,pos_id,store_code,item_total,merchant_discount,actual_packaging_charge,refund_for_disputed_order,order_status,pick_up_status,\n"
            + "    0 as freebies\n"
            + "FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "     order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Zomato_threePOQuery = "SELECT \n"
            + "SUM(COALESCE(CALCULATE_THREE_PO_SALES(z.bill_subtotal,z.merchant_voucher_discount,z.merchant_pack_charge,'zomato',z.action),0)) as threePOSales,\n"
            + "    SUM(coalesce(z.final_amount,0)) as threePOReceivables,\n"
            + "    SUM(coalesce(z.commission_value,0)) as threePOCommission,\n"
            + "    0 as freebies, SUM(coalesce(o.discount,0)) as posDiscounts,sum(coalesce(z.merchant_voucher_discount,0)) as threePODiscounts,\n"
            + "    SUM(COALESCE(CALCULATE_TOTAL_CHARGES(z.tds_amount,z.taxes_zomato_fee,z.pg_charge),0)) AS threePOCharges,\n"
            + "    SUM(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(z.bill_subtotal,z.merchant_voucher_discount,z.merchant_pack_charge,0,z.pg_charge,z.customer_compensation,'zomato',z.action,'',z.dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)) as posReceivables,\n"
            + "    SUM(coalesce(CALCULATE_COMMISSION_AMOUNT(z.bill_subtotal,z.merchant_voucher_discount,z.merchant_pack_charge,0,'zomato',z.action,0,0,0,0,0),0)) as posCommission,\n"
            + "    SUM(ABS(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(z.bill_subtotal,z.merchant_voucher_discount,z.merchant_pack_charge,0,z.pg_charge,z.customer_compensation,'zomato',z.action,'',z.dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)-coalesce(z.payout_amount,0))) as receivablesVsReceipts,\n"
            + "    SUM(coalesce(CALCULATE_TDS(z.bill_subtotal, z.merchant_voucher_discount, z.merchant_pack_charge,0, 'zomato',z.action),0)+coalesce(CALCULATE_CHARGES_GST(z.bill_subtotal,z.merchant_voucher_discount,z.merchant_pack_charge,0,z.pg_charge,'zomato',z.action),0)) as posCharges,\n"
            + "    SUM(coalesce(CALCULATE_UNRECONCILED_AMOUNT(z.bill_subtotal,z.final_amount,z.merchant_voucher_discount,z.gst_customer_bill,z.commission_value,z.merchant_pack_charge,z.tds_amount,z.taxes_zomato_fee,z.pg_charge,customer_compensation,z.bill_subtotal+z.merchant_pack_charge-z.merchant_voucher_discount,z.actual_packaging_charge,0,'zomato',z.action,'','',z.dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)) as unreconciled,\n"
            + "    SUM(coalesce(CALCULATE_RECONCILED_AMOUNT(z.bill_subtotal,z.final_amount,z.merchant_voucher_discount,z.gst_customer_bill,z.commission_value,z.merchant_pack_charge,z.tds_amount,z.taxes_zomato_fee,z.pg_charge,z.customer_compensation,z.bill_subtotal+z.merchant_pack_charge-z.merchant_voucher_discount,z.actual_packaging_charge,0,'zomato',z.action,'','',z.dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)) as reconciled\n"
            + "FROM\n"
            + "    zomato z left join orders o on z.order_id=o.threepoorder_id and threeposource='ZOMATO' \n"
            + "WHERE\n"
            + "    z.order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or z.store_code in (:storeCodes)) ;";

    String Zomato_allPOSChargesQuery = "SELECT order_id,order_date,invoice_number,(pos_total_amount-pos_total_tax) as posSale,business_date,receipt_number,pos_id,store_code,freebie,bill_subtotal,actual_packaging_charge,\n"
            + "    coalesce(freebie,0) as freebies,\n"
            + "    coalesce(CALCULATE_COMMISSION_AMOUNT(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,'zomato',action,0,0,0,0,0),0) as posCommission,\n"
            + "    coalesce(CALCULATE_TDS(bill_subtotal, merchant_voucher_discount, merchant_pack_charge,0, 'zomato',action),0)+coalesce(CALCULATE_CHARGES_GST(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,pg_charge,'zomato',action),0) as posCharges\n"
            + "FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Zomato_threePOChargesQuery = "SELECT order_id,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,tds_amount,taxes_zomato_fee,pg_charge,\n"
            + "   COALESCE(CALCULATE_TOTAL_CHARGES(tds_amount,taxes_zomato_fee,pg_charge),0) AS threePOCharges\n"
            + "FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Zomato_allThreePOChargesQuery = "SELECT \n"
            + "order_id,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,commission_value,tds_amount,taxes_zomato_fee,pg_charge,\n"
            + "    coalesce(commission_value,0) as threePOCommission,\n"
            + "    coalesce(freebie,0) as freebies,\n"
            + "    coalesce(merchant_voucher_discount,0) as threePODiscounts,\n"
            + "    coalesce(CALCULATE_TOTAL_CHARGES(tds_amount,taxes_zomato_fee,pg_charge),0) AS threePOCharges\n"
            + "    FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Zomato_threePOReceivablesQuery = "SELECT order_id,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,final_amount,\n"
            + "    coalesce(final_amount,0) as threePOReceivables\n"
            + "FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "        order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Zomato_threePOCommissionQuery = "SELECT order_id,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,commission_value,\n"
            + "    coalesce(commission_value,0) as threePOCommission\n"
            + "   FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "        order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Zomato_threePOFreebieQuery = "SELECT order_id,order_date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,freebie,\n"
            + "    coalesce(freebie,0) as freebies\n"
            + "   FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "        order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Zomato_posRecievableQuery = "SELECT \n"
            + "order_id,order_date,invoice_number,(pos_total_amount-pos_total_tax) as posSale,business_date,receipt_number,pos_id,store_code,bill_subtotal,freebie,actual_packaging_charge,action,\n"
            + "    coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,pg_charge,customer_compensation,'zomato',action,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0) as posReceivables\n"
            + "    FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String Zomato_posChargesQuery = "SELECT order_id,order_date,invoice_number,(pos_total_amount-pos_total_tax) as posSale,business_date,receipt_number,pos_id,store_code,bill_subtotal,freebie,actual_packaging_charge,action,\n"
            + "    coalesce(CALCULATE_TDS(bill_subtotal, merchant_voucher_discount, merchant_pack_charge,0, 'zomato',action),0)+coalesce(CALCULATE_CHARGES_GST(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,pg_charge,'zomato',action),0) as posCharges\n"
            + "FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String Zomato_posCommissionQuery = "SELECT \n"
            + "order_id,order_date,invoice_number,(pos_total_amount-pos_total_tax) as posSale,business_date,receipt_number,pos_id,store_code,bill_subtotal,freebie,actual_packaging_charge,action,\n"
            + "    coalesce(CALCULATE_COMMISSION_AMOUNT(bill_subtotal,freebie,actual_packaging_charge,0,'zomato',action,0,0,0,0,0),0) as posCommission\n"
            + "FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "     order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String Zomato_receivablesVsReceiptsQuery = "SELECT order_id,order_date,invoice_number,(pos_total_amount-pos_total_tax) as posSale,business_date,receipt_number,pos_id,store_code,payout_date,reference_number,final_amount,bill_subtotal,actual_packaging_charge,action,payout_amount,\n"
            + "    coalesce(final_amount,0) as threePOReceivables,\n"
            + "    coalesce(freebie,0) as freebies,\n"
            + "    coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,pg_charge,customer_compensation,'zomato',action,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0) as posReceivables,\n"
            + "    ABS(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,pg_charge,customer_compensation,'zomato',action,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)-coalesce(payout_amount,0)) as receivablesVsReceipts\n"
            + "FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String freebiesQuery = "SELECT \n"
            + "order_id,order_date,invoice_number,(pos_total_amount-pos_total_tax) as posSale,business_date,receipt_number,pos_id,store_code,bill_subtotal,freebie,actual_packaging_charge,action,\n"
            + "    coalesce(freebie,0) as freebies\n"
            + "FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String Magicpin_threePOQuery = "SELECT \n"
            + "SUM(COALESCE(CALCULATE_THREE_PO_SALES(item_amount,0,packaging_charge,'magicpin',order_status),0)) as threePOSales,\n"
            + "    SUM(coalesce(net_payable,0)) as threePOReceivables,\n"
            + "    SUM(coalesce(commission,0)) as threePOCommission,\n"
            + "    SUM(coalesce(0,0)) as freebies,\n"
            + "    SUM(COALESCE(CALCULATE_TOTAL_CHARGES(tds,gst_on_commission,0),0)) AS threePOCharges,\n"
            + "    SUM(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_amount,0,actual_packaging_charge,debited_amount,0,0,'magicpin',order_status,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)) as posReceivables,\n"
            + "    SUM(ABS(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_amount,0,actual_packaging_charge,debited_amount,0,0,'magicpin',order_status,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)-coalesce(payout_amount,0))) as receivablesVsReceipts,\n"
            + "    SUM(coalesce(CALCULATE_COMMISSION_AMOUNT(item_amount,0,actual_packaging_charge,debited_amount,'magicpin',order_status,0,0,0,0,0),0)) as posCommission,\n"
            + "    SUM(coalesce(CALCULATE_TDS(item_amount, 0, actual_packaging_charge,debited_amount, 'magicpin',order_status),0)+coalesce(CALCULATE_CHARGES_GST(item_amount,0,actual_packaging_charge,debited_amount,0,'magicpin',order_status),0)) as posCharges,\n"
            + "    SUM(coalesce(CALCULATE_UNRECONCILED_AMOUNT(item_amount,net_payable,0,gst,commission,packaging_charge,tds,gst_on_commission,0,0,pos_total_amount-pos_total_tax,actual_packaging_charge,debited_amount,'magicpin',order_status,'','',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)) as unreconciled,\n"
            + "    SUM(coalesce(CALCULATE_RECONCILED_AMOUNT(item_amount,net_payable,0,gst,commission,packaging_charge,tds,gst_on_commission,0,0,pos_total_amount-pos_total_tax,actual_packaging_charge,debited_amount,'magicpin',order_status,'','',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)) as reconciled\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "    date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Magicpin_allPOSChargeQuery = "SELECT \n"
            + "order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,item_amount,actual_packaging_charge,debited_amount,\n"
            + "    coalesce(0,0) as freebies,\n"
            + "    coalesce(CALCULATE_COMMISSION_AMOUNT(item_amount,0,actual_packaging_charge,debited_amount,'magicpin',order_status,0,0,0,0,0),0) as posCommission,\n"
            + "    coalesce(CALCULATE_TDS(item_amount, 0, actual_packaging_charge,debited_amount, 'magicpin',order_status),0)+coalesce(CALCULATE_CHARGES_GST(item_amount,0,actual_packaging_charge,0,'magicpin',order_status),0) as posCharges\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "    date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Magicpin_allThreePOChargesQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,commission,tds,gst_on_commission,\n"
            + "    coalesce(commission,0) as threePOCommission,\n"
            + "    coalesce(0,0) as freebies,\n"
            + "    COALESCE(CALCULATE_TOTAL_CHARGES(tds,gst_on_commission,0),0) AS threePOCharges\n"
            + "    FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Magicpin_threePOChargesQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,tds,gst_on_commission,\n"
            + "    COALESCE(CALCULATE_TOTAL_CHARGES(tds,gst_on_commission,0),0) AS threePOCharges\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Magicpin_receivablesVsReceiptsQuery = "SELECT \n"
            + "order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,payout_date,reference_number,item_amount,actual_packaging_charge,debited_amount,order_status,payout_amount,\n"
            + "    coalesce(net_payable,0) as threePOReceivable,coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_amount,0,actual_packaging_charge,debited_amount,0,0,'magicpin',order_status,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0) as posReceivable, ABS(coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_amount,0,actual_packaging_charge,debited_amount,0,0,'magicpin',order_status,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0)-coalesce(payout_amount,0)) as receivablesVsReceipts\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Magicpin_threePOReceivablesQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,net_payable,\n"
            + "    coalesce(net_payable,0) as threePOReceivables\n"
            + "    FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "    date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Magicpin_threePOCommissionQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,commission,\n"
            + "    coalesce(commission,0) as threePOCommission\n"
            + "    FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "    date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Magicpin_threePOFreebieQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,\n"
            + "    coalesce(0,0) as freebies\n"
            + "    FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "    date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Magicpin_discountsQuery = "SELECT date,order_id,item_amount,coalesce(mfp,0) as discounts\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "    date BETWEEN :startDate AND :endDate AND (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String Magicpin_posRecievableQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,item_amount,actual_packaging_charge,debited_amount,order_status,\n"
            + "    coalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_amount,0,actual_packaging_charge,debited_amount,0,0,'magicpin',order_status,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0) as posReceivables\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "date BETWEEN :startDate AND :endDate AND (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String Magicpin_posCommissionQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,item_amount,actual_packaging_charge,debited_amount,order_status,\n"
            + "    coalesce(CALCULATE_COMMISSION_AMOUNT(item_amount,0,actual_packaging_charge,debited_amount,'magicpin',order_status,0,0,0,0,0),0) as posCommission\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "date BETWEEN :startDate AND :endDate AND (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String Magicpin_posChargesQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,item_amount,actual_packaging_charge,debited_amount,order_status,\n"
            + "    coalesce(CALCULATE_TDS(item_amount, 0, actual_packaging_charge,debited_amount, 'magicpin',order_status),0)+coalesce(CALCULATE_CHARGES_GST(item_amount,0,actual_packaging_charge,0,0,'magicpin',order_status),0) as posCharges\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "date BETWEEN :startDate AND :endDate AND (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String Magicpin_freebiesQuery = "SELECT order_id,date,invoice_number,pos_total_amount-pos_total_tax,business_date,receipt_number,pos_id,store_code,item_amount,actual_packaging_charge,debited_amount,order_status,\n"
            + "    coalesce(0,0) as freebies\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "date BETWEEN :startDate AND :endDate AND (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes));";

    String zomato3POvsPOS = "SELECT \n"
            + "CAST(z.order_id AS CHAR) as orderID,\n"
            + "order_date as orderDate,\n"
            + "store_code as storeCode,\n"
            + "invoice_number as invoiceNumber,\n"
            + "business_date as businessDate,\n"
            + "receipt_number as receiptNumber,\n"
            + "dot_pe_order_status_description as dotPeOrderStatusDescription,\n"
            + "pos_id as posId,\n"
            + "action as orderStatus,\n"
            + "'' as pickupStatus,\n"
            + "'' as cancellationRemark,\n"
            + "0 as refundForDisputedOrder,\n"
            + "bill_subtotal as billSubtotal,\n"
            + "dot_pe_order_cancelled_stage as dotPeOrderCancelledStage,\n"
            + "freebie as salt,\n"
            + "    COALESCE(CALCULATE_THREE_PO_SALES(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,'zomato',action),0) as threePOSales,\n"
            + "    (pos_total_amount-pos_total_tax) as posSales,\n"
            + "    coalesce(final_amount,0) as threePOReceivables,\n"
            + "\tcoalesce(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,pg_charge,customer_compensation,'zomato',action,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0) as posReceivables,\n"
            + "    merchant_pack_charge as threePOPackagingCharge,\n"
            + "    actual_packaging_charge as posPackagingCharge,\n"
            + "    \n"
            + "    coalesce(CALCULATE_TDS(bill_subtotal, merchant_voucher_discount, merchant_pack_charge,0, 'zomato',action),0) as posTDS,\n"
            + "    merchant_pack_charge*0.01 as threePOTDS,\n"
            + "    \n"
            + "     (((bill_subtotal+merchant_pack_charge)-merchant_voucher_discount)-cancellation_refund)*0.18 as threePOCommission,\n"
            + "\tcoalesce(CALCULATE_COMMISSION_AMOUNT(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,'zomato',action,0,0,0,0,0),0) as posCommission,\n"
            + " \n"
            + "    pg_charge as threePOPgCharge,\n"
            + "   pg_charge as posPGCharge,\n"
            + "   \n"
            + "\tcoalesce(CALCULATE_CHARGES_GST(bill_subtotal,merchant_voucher_discount,merchant_pack_charge,0,pg_charge,'zomato',action),0) as posChargesGST,\n"
            + "    (pg_charge+(((bill_subtotal+merchant_pack_charge)-merchant_voucher_discount)-cancellation_refund)*0.18)*0.18 as threePOChargesGST,\n"
            + "    \n"
            + "    source_tax_base*0.05 as threePOConsumerGST,\n"
            + "    (bill_subtotal-merchant_voucher_discount)*0.05 as posConsumerGST,\n"
            + "    coalesce(CALCULATE_UNRECONCILED_AMOUNT(bill_subtotal,final_amount,merchant_voucher_discount,gst_customer_bill,commission_value,merchant_pack_charge,tds_amount,taxes_zomato_fee,pg_charge,customer_compensation,bill_subtotal+merchant_pack_charge-merchant_voucher_discount,actual_packaging_charge,0,'zomato',action,'','',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),0) as unreconciled\n"
            + "FROM\n"
            + "    zomato\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate     AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String swiggy3POvsPOS = "SELECT \n"
            + "    order_no AS orderID,\n"
            + "order_date as orderDate,\n"
            + "store_code as storeCode,\n"
            + "invoice_number as invoiceNumber,\n"
            + "business_date as businessDate,\n"
            + "receipt_number as receiptNumber,\n"
            + "dot_pe_order_status_description as dotPeOrderStatusDescription,\n"
            + "pos_id as posId,\n"
            + "order_status as orderStatus,\n"
            + "pick_up_status as pickupStatus,\n"
            + "merchant_cancellation_charges as merchantCancellationCharges,\n"
            + "cancellation_attribution as cancellationRemark,\n"
            + "refund_for_disputed_order as refundForDisputedOrder,\n"
            + "cash_pre_payment_at_restaurant as cashPrePaymentAtRestaurant,\n"
            + "item_total as billSubtotal,\n"
            + "dot_pe_order_cancelled_stage as dotPeOrderCancelledStage,\n"
            + "merchant_discount as salt,\n"
            + "    COALESCE(CALCULATE_THREE_PO_SALES(item_total,\n"
            + "                    merchant_discount,\n"
            + "                    packing_and_service_charges,\n"
            + "                    'swiggy',order_status),\n"
            + "            0) AS threePOSales,\n"
            + "    pos_total_amount-pos_total_tax AS posSales,\n"
            + "    COALESCE(net_payable_amount_after_tcs_and_tds, 0) AS threePOReceivables,\n"
            + "    COALESCE(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_total,merchant_discount,packing_and_service_charges,refund_for_disputed_order,0,0,'swiggy',order_status,pick_up_status,dot_pe_order_cancelled_stage,tcs,cash_pre_payment_at_restaurant,cancellation_attribution,delivery_fee,discount_on_swiggy_platform_service_fee,collection_fee,access_fee,merchant_cancellation_charges,call_center_servicefees),\n"
            + "            0) AS posReceivables,\n"
            + "    packing_and_service_charges AS threePOPackagingCharge,\n"
            + "    actual_packaging_charge AS posPackagingCharge,\n"
            + "    COALESCE(CALCULATE_TDS(item_total,\n"
            + "                    merchant_discount,\n"
            + "                    packing_and_service_charges,\n"
            + "                    refund_for_disputed_order,\n"
            + "                    'swiggy',order_status),\n"
            + "            0) AS posTDS,\n"
            + "    tds AS threePOTDS,\n"
            + "    COALESCE(total_swiggy_service_fee, 0) AS threePOCommission,\n"
            + "    COALESCE(CALCULATE_COMMISSION_AMOUNT(item_total,merchant_discount,packing_and_service_charges,refund_for_disputed_order,'swiggy',order_status,discount_on_swiggy_platform_service_fee,collection_fee,access_fee,merchant_cancellation_charges,call_center_servicefees),\n"
            + "            0) AS posCommission,\n"
            + "    0 AS threePOPgCharge,\n"
            + "    CALCULATE_PG_CHARGE(item_total,\n"
            + "            merchant_discount,\n"
            + "            packing_and_service_charges,\n"
            + "            'swiggy',order_status) AS posPGCharge,\n"
            + "    COALESCE(CALCULATE_CHARGES_GST(item_total,\n"
            + "                    merchant_discount,\n"
            + "                    packing_and_service_charges,\n"
            + "                    refund_for_disputed_order,0,\n"
            + "                    'swiggy',order_status),\n"
            + "            0) AS posChargesGST,\n"
            + "    total_gst AS threePOChargesGST,\n"
            + "    gst_on_order_including_cess AS threePOConsumerGST,\n"
            + "    pos_total_tax AS posConsumerGST,\n"
            + "    (COALESCE(CALCULATE_UNRECONCILED_AMOUNT(item_total,net_payable_amount_after_tcs_and_tds,merchant_discount,gst_on_order_including_cess,total_swiggy_service_fee,packing_and_service_charges,tds,total_gst,0,0,item_total+packing_and_service_charges-merchant_discount,actual_packaging_charge,refund_for_disputed_order,'swiggy',order_status,pick_up_status,cancellation_attribution,dot_pe_order_cancelled_stage,tcs,cash_pre_payment_at_restaurant,cancellation_attribution,delivery_fee,discount_on_swiggy_platform_service_fee,collection_fee,access_fee,merchant_cancellation_charges,call_center_servicefees),\n"
            + "            0)) AS unreconciled\n"
            + "FROM\n"
            + "    swiggy\n"
            + "WHERE\n"
            + "    order_date BETWEEN :startDate AND :endDate\n"
            + "         AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String magicpinPOSVSThreePO = "SELECT\n"
            + "    order_id AS orderID,\n"
            + "    date AS orderDate,\n"
            + "    store_code AS storeCode,\n"
            + "    invoice_number AS invoiceNumber,\n"
            + "    business_date AS businessDate,\n"
            + "    receipt_number AS receiptNumber,\n"
            + "    pos_id AS posId,\n"
            + "    dot_pe_order_status_description as dotPeOrderStatusDescription,\n"
            + "    order_status AS orderStatus,\n"
            + "    '' AS pickupStatus,\n"
            + "    '' as cancellationRemark,\n"
            + "    dot_pe_order_cancelled_stage as dotPeOrderCancelledStage,\n"
            + "    debited_amount AS refundForDisputedOrder,\n"
            + "    item_amount AS billSubtotal,\n"
            + "    0 AS salt,\n"
            + "    pos_total_amount-pos_total_tax AS posSales,\n"
            + "    packaging_charge AS threePOPackagingCharge,\n"
            + "    actual_packaging_charge AS posPackagingCharge,\n"
            + "    COALESCE(net_payable, 0) AS threePOReceivables,\n"
            + "    tds AS threePOTDS,\n"
            + "    COALESCE(commission, 0) AS threePOCommission,\n"
            + "    0 AS threePOPgCharge,\n"
            + "    gst_on_commission AS threePOChargesGST,\n"
            + "    0 AS posPGCharge,\n"
            + "    gst AS threePOConsumerGST,\n"
            + "    COALESCE(CALCULATE_THREE_PO_SALES(item_amount,0,packaging_charge,'magicpin',order_status),\n"
            + "            0) AS threePOSales,\n"
            + "    COALESCE(CALCULATE_POS_RECEIVABLES_FOR_THREEPO(item_amount,0,actual_packaging_charge,debited_amount,0,0,'magicpin',order_status,'',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),\n"
            + "            0) AS posReceivables,\n"
            + "    COALESCE(CALCULATE_TDS(item_amount, 0, actual_packaging_charge,debited_amount, 'magicpin',order_status),\n"
            + "            0) AS posTDS,\n"
            + "    COALESCE(CALCULATE_COMMISSION_AMOUNT(item_amount,0,actual_packaging_charge,debited_amount,'magicpin',order_status,0,0,0,0,0),\n"
            + "            0) AS posCommission,\n"
            + "    COALESCE(CALCULATE_CHARGES_GST(item_amount,\n"
            + "                    0,\n"
            + "                    actual_packaging_charge,\n"
            + "                    debited_amount,0,\n"
            + "                    'magicpin',order_status),\n"
            + "            0) AS posChargesGST,\n"
            + "    pos_total_tax AS posConsumerGST,\n"
            + "    COALESCE(CALCULATE_UNRECONCILED_AMOUNT(item_amount,net_payable,0,gst,commission,packaging_charge,tds,gst_on_commission,0,0,pos_total_amount-pos_total_tax,actual_packaging_charge,debited_amount,'magicpin',order_status,'','',dot_pe_order_cancelled_stage,0,0,0,0,0,0,0,0,0),\n"
            + "            0) AS unreconciled\n"
            + "FROM\n"
            + "    magicpin\n"
            + "WHERE\n"
            + "    date BETWEEN :startDate AND :endDate\n"
            + "         AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Swiggy_threePODashboardQuery = "SELECT \n"
            + "    SUM(COALESCE(three_po_sales,0)) as threePOSales,\n"
            + "    SUM(coalesce(three_po_receivables,0)) as threePOReceivables,\n"
            + "    SUM(coalesce(three_po_commission,0)) as threePOCommission,\n"
            + "    0 as freebies,sum(coalesce(pos_discounts,0)) as posDiscounts,"
            + "  sum(coalesce(three_po_discounts,0)) as threePODiscounts,\n"
            + "    SUM(coalesce(receivables_vs_receipts,0)) as receivablesVsReceipts,\n"
            + "    SUM(COALESCE(three_po_charges,0)) AS threePOCharges,\n"
            + "    SUM(coalesce(pos_receivables,0)) as posReceivables,\n"
            + "    SUM(coalesce(pos_commission,0)) as posCommission,\n"
            + "    SUM(coalesce(pos_charges,0)) as posCharges,\n"
            + "    SUM(coalesce(un_reconciled,0)) as unreconciled,\n"
            + "    SUM(coalesce(reconciled,0)) as reconciled\n"
            + "FROM\n"
            + "    threepo_dashboard where tender_name='SWIGGY' \n"
            + "and\n"
            + "    business_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

    String Zomato_threePODashboardQuery = "SELECT \n"
            + "    SUM(COALESCE(three_po_sales,0)) as threePOSales,\n"
            + "    SUM(coalesce(three_po_receivables,0)) as threePOReceivables,\n"
            + "    SUM(coalesce(three_po_commission,0)) as threePOCommission,\n"
            + "    0 as freebies,sum(coalesce(pos_discounts,0)) as posDiscounts,sum(coalesce(three_po_discounts,0)) as threePODiscounts,\n"
            + "    SUM(coalesce(receivables_vs_receipts,0)) as receivablesVsReceipts,\n"
            + "    SUM(COALESCE(three_po_charges,0)) AS threePOCharges,\n"
            + "    SUM(coalesce(pos_receivables,0)) as posReceivables,\n"
            + "    SUM(coalesce(pos_commission,0)) as posCommission,\n"
            + "    SUM(coalesce(pos_charges,0)) as posCharges,\n"
            + "    SUM(coalesce(un_reconciled,0)) as unreconciled,\n"
            + "    SUM(coalesce(reconciled,0)) as reconciled\n"
            + "FROM\n"
            + "    threepo_dashboard where tender_name='ZOMATO' \n"
            + "and\n"
            + "    business_date BETWEEN :startDate AND :endDate    AND  (COALESCE(:storeCodes,NULL) is null or store_code in (:storeCodes)) ;";

}
